{
    "shader": [{
            "name": "Translucent Shader",
            "url": {
                "link": "https://github.com/nkihrk/everyday-one-shader/blob/master/BRDFTranslucentSSS.shader",
                "image": [
                    "../../img/code/shader/BRDFTranslucentSSS.gif"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "Using various techniques to simulate translucency. Go check my code to see how it works."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "Unlit Waterfall Shader",
            "url": {
                "link": "https://github.com/nkihrk/everyday-one-shader/blob/master/UnlitWaterFallShader.Shader",
                "image": [
                    "../../img/code/shader/UnlitWaterFall_3.gif"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "Trying to express cartoon-like waterfall like the one from Zelda. I am not that satisfied with the result shading, but yup still looks nice at some point."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "Fire Shader",
            "url": {
                "link": "https://github.com/nkihrk/everyday-one-shader/blob/master/FireShader.shader",
                "image": [
                    "../../img/code/shader/bandicam 2018-09-10 07-27-13-144.gif",
                    "../../img/code/shader/bandicam_2018-09-12_01-08-48-646.gif"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "Using noise texture to simulate fire."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "Burning Outline Shader",
            "url": {
                "link": "https://github.com/nkihrk/everyday-one-shader/blob/master/BurningOutlineShader.shader",
                "image": [
                    "../../img/code/shader/bandicam_2018-09-15_17-39-52-972.gif",
                    "../../img/code/shader/bandicam_2018-09-12_15-05-26-060.gif"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "Burning effect is all calcurated in screen-space. That`s the keypoint of this shader. Push the surface polygons a bit to the same direction as normal vector in screen-space, which we can only concentrate on x and y coordinate, and no need to care about z coordinate for calcuration, only for adjustment."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "Cross Hatching Shader",
            "url": {
                "link": "https://github.com/nkihrk/HatchingShader/blob/master/HatchingShader.shader",
                "image": [
                    "../../img/code/shader/ugolino_with_hatching_shader.jpg",
                    "../../img/code/shader/D9km0JvUEAAACqN.jpg"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "I got ideas from the paper called 'Real-time Hatching'. Customized their method and tried to improve it to make it more practical in game-use."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "GPU Raytracing with Unity",
            "url": {
                "link": "",
                "image": [
                    "../../img/code/shader/DogDSAJVAAE0ITm.jpg"
                ]
            },
            "content": {
                "linkName": "",
                "date": "July 20, 2019",
                "text": "GPU Raytracing with C# and Compute Shader. There are many tutorials on how to make GPU Raytracer with Unity, so I tested for studying. It actually helped me a lot to understand the mechanism of path tracing. Next time, I `ll try to import fbx model via C# and render it with path tracer."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        },
        {
            "name": "Burning Effect Shader",
            "url": {
                "link": "https://github.com/nkihrk/everyday-one-shader/blob/master/BurningEffect.shader",
                "image": [
                    "../../img/code/shader/bandicam_2018-09-07_13-19-37-498.gif"
                ]
            },
            "content": {
                "linkName": "VIEW CODE",
                "date": "July 20, 2019",
                "text": "Trying to simulate burning effect using noise texture. Also using fire image for burning. So there we need a base texture for the model`s detail and a noise texture for simulating fire-like animation, and a fire image for burning outline."
            },
            "tag": [
                "#ShaderLab",
                "#Shader",
                "#Unity"
            ]
        }
    ]
}